# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path
 
name: Maven Package

on:
  push:
   branches:
    - main
    - release/*

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions: write-all
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Set up graalvm
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm' # See 'Options' for all available distributions
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'

    - name: üî® Build with Maven
      run: mvn package

    # ËÆæÁΩÆ jobs Maven pom ÁâàÊú¨ÁéØÂ¢ÉÂèòÈáè
    - name: compile to native
      run: |
        RELEASE_VERSION=$(mvn help:evaluate -Dexpression='project.version' -q -DforceStdout)
        JAR_NAME=$(mvn help:evaluate -Dexpression='project.artifactId' -q -DforceStdout)-${RELEASE_VERSION}
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
        mkdir staging && cp target/$JAR_NAME.jar staging/
        native-image --initialize-at-build-time=ch.qos.logback --initialize-at-build-time=com.freedy.log.EasyPatternLayout --initialize-at-build-time=org.slf4j  --initialize-at-build-time=com.freedy.tinyFramework.BeanDefinitionScanner -jar staging/$JAR_NAME.jar
        ls -l staging/

    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JAR_NAME }}-${{ matrix.os }}
        path: staging/*

    # ‰∏ä‰º†Êñá‰ª∂Âπ∂ÂèëÂ∏É Release
    # - uses: "marvinpinto/action-automatic-releases@latest"
    #   with:
    #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
    #     automatic_release_tag: "${{ env.RELEASE_VERSION }}"
    #     prerelease: false
    #     title: "Release ${{ env.RELEASE_VERSION }}"
    #     files: |
    #       staging/*.jar

    # - name: üöÄ SCP to remote server
    #   uses: appleboy/scp-action@master
    #   with:
    #     host: ${{ secrets.SSHHOST }}
    #     username: ${{ secrets.SSHUSSER }}
    #     password: ${{ secrets.SSHPASSWORD }}
    #     port: 22
    #     source: "./target/netUtils-1.0.0.jar"
    #     target: "/root"
    #     strip_components: 2

    # - name: üåà run server
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SSHHOST }}
    #     username: ${{ secrets.SSHUSSER }}
    #     password: ${{ secrets.SSHPASSWORD }}
    #     port: 22
    #     script: |
    #       cd /root
    #       ./start.sh
