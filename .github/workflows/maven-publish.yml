# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path
 
name: Maven Package

on:
  push:
   branches:
    - main
    - release/*

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions: write-all
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v2
    - name: Set up graalvm
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm' # See 'Options' for all available distributions
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'

    - name: 🔨 Build with Maven
      run: mvn package

    # 设置 jobs Maven pom 版本环境变量
    - name: compile to linux or mac native
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        RELEASE_VERSION=$(mvn help:evaluate -Dexpression='project.version' -q -DforceStdout)
        JAR_NAME=$(mvn help:evaluate -Dexpression='project.artifactId' -q -DforceStdout)-${RELEASE_VERSION}
        echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
        mkdir release && cp target/$JAR_NAME.jar release/
        cd release
        native-image --initialize-at-build-time=ch.qos.logback --initialize-at-build-time=com.freedy.log.EasyPatternLayout --initialize-at-build-time=org.slf4j  --initialize-at-build-time=com.freedy.tinyFramework.BeanDefinitionScanner -jar ./$JAR_NAME.jar
        rm ./$JAR_NAME.jar
        ls -l

    - name: compile to windows native
      if: matrix.os == 'windows-latest' 
      run: |
        $RELEASE_VERSION=$(mvn help:evaluate -Dexpression='project.version' -q -DforceStdout)
        $JAR_NAME="$(mvn help:evaluate -Dexpression='project.artifactId' -q -DforceStdout)-${RELEASE_VERSION}"
        echo "`$JAR_NAME=$JAR_NAME" >> $GITHUB_ENV
        mkdir release && cp target/$JAR_NAME.jar release/
        cd release
        native-image --initialize-at-build-time=ch.qos.logback --initialize-at-build-time=com.freedy.log.EasyPatternLayout --initialize-at-build-time=org.slf4j  --initialize-at-build-time=com.freedy.tinyFramework.BeanDefinitionScanner -jar ./$JAR_NAME.jar
        rm ./$JAR_NAME.jar
        ls

    - name: Upload binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.JAR_NAME }}-${{ matrix.os }}
        path: release/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build # 表示依赖于build这个job的完成
    steps:
      - uses: actions/checkout@v2
      - run: echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression='project.version' -q -DforceStdout)" >> $GITHUB_ENV
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          path: release/
          run: ls -l release/
      # - name: Create Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     files: native-image-demo # 指定要上传的文件名或通配符
      #     tag_name: ${{ github.ref }} # 指定要创建的标签名，默认为当前推送的标签
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 指定github token，用于授权
   
    # 上传文件并发布 Release
      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "${{ env.RELEASE_VERSION }}"
          prerelease: false
          title: "Release ${{ env.RELEASE_VERSION }}"
          files: |
            release/*

    # - name: 🚀 SCP to remote server
    #   uses: appleboy/scp-action@master
    #   with:
    #     host: ${{ secrets.SSHHOST }}
    #     username: ${{ secrets.SSHUSSER }}
    #     password: ${{ secrets.SSHPASSWORD }}
    #     port: 22
    #     source: "./target/netUtils-1.0.0.jar"
    #     target: "/root"
    #     strip_components: 2

    # - name: 🌈 run server
    #   uses: appleboy/ssh-action@master
    #   with:
    #     host: ${{ secrets.SSHHOST }}
    #     username: ${{ secrets.SSHUSSER }}
    #     password: ${{ secrets.SSHPASSWORD }}
    #     port: 22
    #     script: |
    #       cd /root
    #       ./start.sh
